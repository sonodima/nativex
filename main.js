const fs = require("fs");
const { toSnakeCase, toPascalCase, toLowerCase } = require("js-convert-case");

let raw = fs.readFileSync("natives.json");
let namespaces = JSON.parse(raw);

let out =
  "#pragma once\n\n/**\n * Generated by sonodima/nativex\n */\n\n// clang-format off\n\nnamespace natives {\n";
for (var namespace in namespaces) {
  out += `namespace ${toSnakeCase(namespace)} {\n`;

  for (var hash in namespaces[namespace]) {
    var returnType = namespaces[namespace][hash]["results"];
    if (returnType == "BOOL") {
      returnType = "bool";
    } else if (returnType == "BOOL*") {
      returnType = "bool*";
    }

    let lowerHash = toLowerCase(hash);

    let name = toPascalCase(namespaces[namespace][hash]["name"]);
    if (name == "") {
      name = `_${lowerHash}`;
    }

    // Create params string.
    var params = "";
    var paramsNames = "";
    for (var param in namespaces[namespace][hash]["params"]) {
      let pType = namespaces[namespace][hash]["params"][param]["type"];
      if (pType == "BOOL") {
        pType = "bool";
      } else if (pType == "BOOL*") {
        pType = "bool*";
      }

      let pName = namespaces[namespace][hash]["params"][param]["name"];
      params += `${pType} ${toSnakeCase(pName)}`;
      paramsNames += toSnakeCase(pName);

      if (param < namespaces[namespace][hash]["params"].length - 1) {
        params += ", ";
        paramsNames += ", ";
      }
    }

    let jhash = toLowerCase(namespaces[namespace][hash]["jhash"]);

    out += `  static ${returnType} ${name}(${params}) { return Invoke<${returnType}>(${lowerHash}${
      paramsNames != "" ? ", " : ""
    }${paramsNames}); } // ${lowerHash} ${jhash}\n`;
  }

  out += "}\n";

  if (namespace < namespaces.length - 1) {
    out += "\n";
  }
}

out += "}\n\n// clang-format on\n";

fs.writeFileSync("natives.h", out);
